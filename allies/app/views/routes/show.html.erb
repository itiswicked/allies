<div class="routes-show">
  <div id="routes-map" style="position:absolute; width:49%; height:100%; background:grey" ></div>
  <div id="panel" style="position:absolute; width:49%; left:51%; height:100%; background:inherit" ></div>

  <script  type="text/javascript" charset="UTF-8" >

  /**
  * * Calculates and displays a public trasnsport route from the Fernsehturm in Berlin
  * to Kurf√ºrstendamm in the west of the city
  *
  * A full list of available request parameters can be found in the Routing API documentation.
  * see:  http://developer.here.com/rest-apis/documentation/routing/topics/resource-calculate-route.html
  *
  * @param   {H.service.Platform} platform    A stub class to access HERE services
  */
    function calculateRouteFromAtoB (platform, start, end, avoidareas) {
      var router = platform.getRoutingService(),
        routeRequestParams = {
      mode: 'fastest;pedestrian',
      representation: 'display',
      waypoint0: start,
      waypoint1: end,
      routeattributes: 'waypoints,summary,shape,legs',
      maneuverattributes: 'direction,action',
      avoidareas: avoidareas
    };


  router.calculateRoute(
    routeRequestParams,
    onSuccess,
    onError
  );
  }
  /**
  * This function will be called once the Routing REST API provides a response
  * @param  {Object} result          A JSONP object representing the calculated route
  *
  * see: http://developer.here.com/rest-apis/documentation/routing/topics/resource-type-calculate-route.html
  */
  function onSuccess(result) {
  var route = result.response.route[0];
  /*
  * The styling of the route response on the map is entirely under the developer's control.
  * A representitive styling can be found the full JS + HTML code of this example
  * in the functions below:
  */
  addRouteShapeToMap(route);
  addManueversToMap(route);

  addWaypointsToPanel(route.waypoint);
  addManueversToPanel(route);
  addSummaryToPanel(route.summary);
  // ... etc.
  }

  /**
  * This function will be called if a communication error occurs during the JSON-P request
  * @param  {Object} error  The error message received.
  */
  function onError(error) {
  alert('Ooops!');
  }

    function geocode(platform, address) {
  var geocoder = platform.getGeocodingService(),
      geocodingParameters = {
    searchText: address,
    jsonattributes : 1

      };

  geocoder.geocode(
      geocodingParameters,
      onSuccess_locate,
      onError
  );
    }
  /**
  * This function will be called once the Geocoder REST API provides a response
  * @param  {Object} result          A JSONP object representing the  location(s) found.
  *
  * see: http://developer.here.com/rest-apis/documentation/geocoder/topics/resource-type-response-geocode.html
    */
    function onSuccess_locate(result) {
  var locations = result.response.view[0].result;
   /*
  * The styling of the geocoding response on the map is entirely under the developer's control.
  * A representitive styling can be found the full JS + HTML code of this example
  * in the functions below:
    */
  location = locations[0];
  return location
  // ... etc.
    }
  /**
  * Creates a series of H.map.Markers for each location found, and adds it to the map.
  * @param {Object[]} locations An array of locations as received from the
  *                             H.service.GeocodingService
    */

  /**
  * This function will be called if a communication error occurs during the JSON-P request
  * @param  {Object} error  The error message received.
    */
    function onError(error) {
  alert('Ooops!');
    }

  /**
  * Boilerplate map initialization code starts below:
  */

  // set up containers for the map  + panel
  var mapContainer = document.getElementById('routes-map'),
  routeInstructionsContainer = document.getElementById('panel');

  //Step 1: initialize communication with the platform
  var platform = new H.service.Platform({
    app_id: 'DemoAppId01082013GAL',
    app_code: 'AJKnXv84fjrb0KIHawS0Tg',
    useCIT: true,
    useHTTPS: true
  });
  var defaultLayers = platform.createDefaultLayers();

  //Step 2: initialize a map - this map is centered over Berlin
  var map = new H.Map(mapContainer,
  defaultLayers.normal.map,{
  center: {lat:42.368585, lng:-71.075279},
  zoom: 13
  });

  //Step 3: make the map interactive
  // MapEvents enables the event system
  // Behavior implements default interactions for pan/zoom (also on mobile touch environments)
  var behavior = new H.mapevents.Behavior(new H.mapevents.MapEvents(map));

  // Create the default UI components
  var ui = H.ui.UI.createDefault(map, defaultLayers);

  // Hold a reference to any infobubble opened
  var bubble;

  /**
  * Opens/Closes a infobubble
  * @param  {H.geo.Point} position     The location on the map.
  * @param  {String} text              The contents of the infobubble.
  */
  function openBubble(position, text){
  if(!bubble){
    bubble =  new H.ui.InfoBubble(
      position,
      // The FO property holds the province name.
      {content: text});
    ui.addBubble(bubble);
  } else {
    bubble.setPosition(position);
    bubble.setContent(text);
    bubble.open();
  }
  }


  /**
  * Creates a H.map.Polyline from the shape of the route and adds it to the map.
  * @param {Object} route A route as received from the H.service.RoutingService
  */
  function addRouteShapeToMap(route){
  var strip = new H.geo.Strip(),
    routeShape = route.shape,
    polyline;

  routeShape.forEach(function(point) {
    var parts = point.split(',');
    strip.pushLatLngAlt(parts[0], parts[1]);
  });

  polyline = new H.map.Polyline(strip, {
    style: {
      lineWidth: 4,
      strokeColor: 'rgba(0, 128, 255, 0.7)'
    }
  });
  // Add the polyline to the map
  map.addObject(polyline);
  // And zoom to its bounding rectangle
  map.setViewBounds(polyline.getBounds(), true);
  }


  /**
  * Creates a series of H.map.Marker points from the route and adds them to the map.
  * @param {Object} route  A route as received from the H.service.RoutingService
  */
  function addManueversToMap(route){
  var svgMarkup = '<svg width="18" height="18" ' +
    'xmlns="http://www.w3.org/2000/svg">' +
    '<circle cx="8" cy="8" r="8" ' +
      'fill="#1b468d" stroke="white" stroke-width="1"  />' +
    '</svg>',
    dotIcon = new H.map.Icon(svgMarkup, {anchor: {x:8, y:8}}),
    group = new  H.map.Group(),
    i,
    j;

  // Add a marker for each maneuver
  for (i = 0;  i < route.leg.length; i += 1) {
    for (j = 0;  j < route.leg[i].maneuver.length; j += 1) {
      // Get the next maneuver.
      maneuver = route.leg[i].maneuver[j];
      // Add a marker to the maneuvers group
      var marker =  new H.map.Marker({
        lat: maneuver.position.latitude,
        lng: maneuver.position.longitude} ,
        {icon: dotIcon});
      marker.instruction = maneuver.instruction;
      group.addObject(marker);
    }
  }

  group.addEventListener('tap', function (evt) {
    map.setCenter(evt.target.getPosition());
    openBubble(
       evt.target.getPosition(), evt.target.instruction);
  }, false);

  // Add the maneuvers group to the map
  map.addObject(group);
  }


  /**
  * Creates a series of H.map.Marker points from the route and adds them to the map.
  * @param {Object} route  A route as received from the H.service.RoutingService
  */
  function addWaypointsToPanel(waypoints){



  var nodeH3 = document.createElement('h3'),
    waypointLabels = [],
    i;


   for (i = 0;  i < waypoints.length; i += 1) {
    waypointLabels.push(waypoints[i].label)
   }

   nodeH3.textContent = waypointLabels.join(' - ');

  routeInstructionsContainer.innerHTML = '';
  routeInstructionsContainer.appendChild(nodeH3);
  }

  /**
  * Creates a series of H.map.Marker points from the route and adds them to the map.
  * @param {Object} route  A route as received from the H.service.RoutingService
  */
  function addSummaryToPanel(summary){
  var summaryDiv = document.createElement('div'),
   content = '';
   content += '<b>Total distance</b>: ' + summary.distance  + 'm. <br/>';
   content += '<b>Travel Time</b>: ' + summary.travelTime.toMMSS() + ' (in current traffic)';


  summaryDiv.style.fontSize = 'small';
  summaryDiv.style.marginLeft ='5%';
  summaryDiv.style.marginRight ='5%';
  summaryDiv.innerHTML = content;
  routeInstructionsContainer.appendChild(summaryDiv);
  }

  /**
  * Creates a series of H.map.Marker points from the route and adds them to the map.
  * @param {Object} route  A route as received from the H.service.RoutingService
  */
  function addManueversToPanel(route){



  var nodeOL = document.createElement('ol'),
    i,
    j;

  nodeOL.style.fontSize = 'small';
  nodeOL.style.marginLeft ='5%';
  nodeOL.style.marginRight ='5%';
  nodeOL.className = 'directions';

     // Add a marker for each maneuver
  for (i = 0;  i < route.leg.length; i += 1) {
    for (j = 0;  j < route.leg[i].maneuver.length; j += 1) {
      // Get the next maneuver.
      maneuver = route.leg[i].maneuver[j];

      var li = document.createElement('li'),
        spanArrow = document.createElement('span'),
        spanInstruction = document.createElement('span');

      spanArrow.className = 'arrow '  + maneuver.action;
      spanInstruction.innerHTML = maneuver.instruction;
      li.appendChild(spanArrow);
      li.appendChild(spanInstruction);

      nodeOL.appendChild(li);
    }
  }

  routeInstructionsContainer.appendChild(nodeOL);
  }


  Number.prototype.toMMSS = function () {
  return  Math.floor(this / 60)  +' minutes '+ (this % 60)  + ' seconds.';
  }

    // Now use the map as required...
    // initialize point A to point B
    // from_address = '300 Third Street, Cambridge, MA 02142';
    // to_address = 'One Kendall Square, Cambridge, MA 02142';
    // start_point = geocode(from_address);
    // end_point = geocode(to_adress);
    // start = start_point.lat + ',' + start_point.lon;
    // console.log(start);
    // end = end_point.lat + ',' + end_point.lon;
    // console.log(end);
    start = '42.368496,-71.075320';
    end = '42.362555,-71.086457';
    avoidareas = '42.367149,-71.077638;42.365547,-71.075771';
    //avoidareas = '';
    calculateRouteFromAtoB (platform, start, end, avoidareas);
  </script>
</div>
